from typing import List


class Solution:
  def numIslands(self, grid: List[List[str]]) -> int:
    # islands = 0
    # for y, _ in enumerate(grid):
    #   for x, _ in enumerate(grid[y]):
    #     if grid[y][x] == "1":
    #       islands += 1
    #       islandq = [(y, x)]
    #       while islandq:
    #         row, col = islandq.pop(0)
    #         grid[row][col] = "0"

    #         # North
    #         if row != 0 and grid[row-1][col] == "1":
    #           islandq.append((row-1, col))
    #         # East
    #         if col != len(grid[row])-1 and grid[row][col+1] == "1":
    #           islandq.append((row, col+1))
    #         # South
    #         if row != len(grid)-1 and grid[row+1][col] == "1":
    #           islandq.append((row+1, col))
    #         if col != 0 and grid[row][col-1] == "1":
    #           islandq.append((row, col-1))
    # return islands
    def dfs(grid, i, j):
      if 0 <= i < m and 0 <= j < n and grid[i][j] == "1":
        grid[i][j] = "2"
        dfs(grid, i - 1, j)
        dfs(grid, i + 1, j)
        dfs(grid, i, j-1)
        dfs(grid, i, j + 1)
    
    if not grid:
      return 0
    m, n, islands = len(grid), len(grid[0]), 0
    for i in range(m):
      for j in range(n):
        if grid[i][j] == "1":
          islands += 1
          dfs(grid, i, j)
    return islands



s = Solution()

print(s.numIslands([["1", "1", "0", "0", "0"], [
      "1", "1", "0", "0", "0"], ["0", "0", "1", "0", "0"], ["0", "0", "0", "1", "1"]]))

print(s.numIslands([["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]))